interface Node {
        id: ID!
}
 
type Package implements Node {
        id: ID!
        name: String!
        description: HTML (custom scalar)
        activities: [Activity!]!
        image: Image
        price: Int
        hasActivity(id: ID!): Boolean!
        calculateSavings(id: ID!): Int
}
 
type Image {
        id: ID!
}
 
type Activity implements Node {
        id: ID!
        name: String!
        Schedule: String
        category: ActivityCategory!
        price: Int
}
 
 
type Hotel implements Node {
        id: ID!
        name: String!
        packages: [Package!]! (paginated)
}
 
enum ActivityCategory {
        LEISURE
        ADVENTURE
        CULTURE
}
 
type Mutation {
        packageDelete(packageId: ID!)
        packagePublish(packageId: ID!)
        packageUnpublish(packageId: ID!)
        packageAddActivities(packageId: ID!, activityIds: [ID!]!)
        packageRemoveActivities(packageId: ID!, activityIds: [ID!]!)
        packageCreate(package: PackageInput!)
        packageUpdate(packageId: ID!, package: PackageInput!)
}
